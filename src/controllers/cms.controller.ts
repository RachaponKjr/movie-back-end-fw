import {
  createCmsService,
  getCmsByIdService,
  getCmsService,
  updateCmsService,
} from '../services/cms.service';
import { Cms } from '@prisma/client';
import { Request, Response } from 'express';

import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
import path from 'path';
import fs from 'fs';

const createCMSController = async (req: Request, res: Response) => {
  try {
    const body = req.body as Cms;
    const files = req.files as { [fieldname: string]: Express.Multer.File[] };

    if (!body) {
      res.status(400).send({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
      return;
    }

    // ‡πÅ‡∏ô‡∏ö path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
    if (files?.image_banner?.[0]) {
      body.image_banner = `/uploads/cms/${files.image_banner[0].filename}`;
    }
    if (files?.image_advert?.[0]) {
      body.image_advert = `/uploads/cms/${files.image_advert[0].filename}`;
    }

    // ‡πÅ‡∏õ‡∏•‡∏á seo_keyword ‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    try {
      if (typeof body.seo_keyword === 'string') {
        body.seo_keyword = JSON.parse(body.seo_keyword);
      }
    } catch (error) {
      res.status(400).send({
        message:
          '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö seo_keyword ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON array string ‡πÄ‡∏ä‡πà‡∏ô [\"keyword\"]',
      });
      return;
    }

    const create = await createCmsService({ payload: body });

    if (!create) {
      res.status(400).send({ message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à' });
      return;
    }

    res.status(201).send({ create, message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à' });
    return;
  } catch (err) {
    // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Prisma error ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    if (err instanceof PrismaClientKnownRequestError) {
      res
        .status(500)
        .send({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', detail: err.message });
      return;
    }

    console.error('‚ùå CMS CREATE ERROR:', err);
    res.status(500).send({ message: 'Server Error!' });
    return;
  }
};

const getCMSController = async (req: Request, res: Response) => {
  try {
    const getRes = await getCmsService();
    if (!getRes) {
      res.status(400).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö cms' });
      return;
    }
    res.status(200).send({ data: getRes, status: true });
    return;
  } catch (err) {
    console.error('‚ùå CMS GET ERROR:', err);
    res.status(500).send({ message: 'Server Error!' });
    return;
  }
};

const updateCMSController = async (req: Request, res: Response) => {
  try {
    const { id } = req.params as { id: string };
    const payload = req.body as Cms;
    const files = req.files as { [fieldname: string]: Express.Multer.File[] };

    if (!id) {
      res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö ID' });
      return;
    }

    const existingCMS = await getCmsByIdService(id);
    if (!existingCMS) {
      res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö CMS ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
      return;
    }

    if (!payload) {
      res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
      return;
    }

    const filesToDelete: string[] = [];
    if (files?.image_banner?.[0] && existingCMS.image_banner) {
      filesToDelete.push(existingCMS.image_banner);
    }
    if (files?.image_advert?.[0] && existingCMS.image_advert) {
      filesToDelete.push(existingCMS.image_advert);
    }

    for (const filePath of filesToDelete) {
      const fullPath = path.join(__dirname, '..', filePath);
      try {
        if (fs.existsSync(fullPath)) {
          fs.unlinkSync(fullPath);
          console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filePath}`);
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå ${filePath}:`, err);
      }
    }

    if (files?.image_banner?.[0]) {
      payload.image_banner = `/uploads/cms/${files.image_banner[0].filename}`;
    }
    if (files?.image_advert?.[0]) {
      payload.image_advert = `/uploads/cms/${files.image_advert[0].filename}`;
    }

    if (payload.seo_keyword && typeof payload.seo_keyword === 'string') {
      try {
        payload.seo_keyword = JSON.parse(payload.seo_keyword);
      } catch {}
    }

    const updateResult = await updateCmsService(id, payload);
    if (!updateResult) {
      res.status(400).json({ message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
      return;
    }

    res.status(200).json({ data: updateResult, message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    return;
  } catch (error) {
    console.error('‚ùå CMS UPDATE ERROR:', error);
    res.status(500).json({ message: 'Server Error!' });
    return;
  }
};

export { createCMSController, getCMSController, updateCMSController };
