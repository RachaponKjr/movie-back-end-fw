// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model CategoryMovies {
  id            String @id @default(uuid())
  catagory_name String

  movies Movie[]
}

model User {
  id        String   @id @default(uuid())
  username  String
  password  String
  role      Role     @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id           String      @id @default(uuid())
  category_id  String?
  movie_name   String
  duration     String?
  rate         Float?
  view         Int?
  release_year String?
  film_poster  String
  tage         Tags[]
  video_url    String?
  video_type   VideoType?
  status       StatusMovie?
  langMovie    LungMove?
  isShow       Boolean     @default(false)
  updatedAt    DateTime    @updatedAt
  createdAt    DateTime    @default(now())

  CategoryMovies CategoryMovies? @relation(fields: [category_id], references: [id], onDelete: SetNull)
}

model Advert {
  id           String  @id @default(uuid())
  advert_image String
  advert_link  String?
}

model Banner {
  id           String     @id @default(uuid())
  banner_image String
  banner_type  BannerType @default(banner_main)
  banner_url   String?
}

model Tags {
  id           String  @id @default(uuid())
  tag_name     String
  is_show_menu Boolean @default(false)
  Movies       Movie[]
}

enum Role {
  User
  Admin
  Owner
}

enum StatusMovie {
  NotStatus
  New
  Hot
}

enum LungMove {
  Thai
  Eng
}

enum VideoType {
  Vertical
  Horizontal
}

enum BannerType {
  banner_main
  banner_show
}
